package com.capstone.project.movieappbackend.service;

/*
 * Use Mockito ,MockBean,InjectMock
 * create  movieRepository mock
 * create  RestTemplate mock
 * create  MovieServiceImpl service
 * write test case for all the methods available in the MovieServiceImpl
 * 
 * 
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.capstone.project.movieappbackend.model.Movie;
import com.capstone.project.movieappbackend.model.MovieList;
import com.capstone.project.movieappbackend.repository.MovieRepository;
import com.capstone.project.movieappbackend.services.MovieService;
import com.capstone.project.movieappbackend.services.MovieServiceImpl;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.web.client.RestTemplate;

@ExtendWith(SpringExtension.class)
@SpringBootTest
public class MovieServiceImplTest {
    @Mock
    private MovieRepository movieRepository;

    @Mock
    private RestTemplate restTemplate;

    @InjectMocks
    private MovieServiceImpl movieServiceImpl;

    @Test
    public void testSaveMovie() {
        Movie movie = new Movie("1", 0, "The Shawshank Redemption", "Drama", "USA", 0, "1994", null, null, null, null, null, null, null);
        when(movieRepository.save(movie)).thenReturn(movie);
        assertEquals(movie, movieServiceImpl.saveMovie(movie));
    }

    @Test
    public void testDeleteMovie() {
        when(movieRepository.existsById("1")).thenReturn(true);
        assertEquals("Movie deleted successfully", movieServiceImpl.deleteMovie("1"));
    }

    @Test
    public void testGetMovieById() {
        Movie movie = new Movie("1", 0, "The Shawshank Redemption", "Drama", "USA", 0, "1994", null, null, null, null, null, null, null);
        when(movieRepository.findById("1")).thenReturn(Optional.of(movie));
        assertEquals(movie, movieServiceImpl.getMovieById("1"));
    }

    @Test
    public void testGetMoviesList() {
        List<Movie> movies = new ArrayList<>();
        Movie movie = new Movie("1", 0, "The Shawshank Redemption", "Drama", "USA", 0, "1994", null, null, null, null, null, null, null);
        movies.add(movie);
        when(movieRepository.findAll()).thenReturn(movies);
        assertEquals(movies, movieServiceImpl.getMoviesList());
    }

    @Test
    public void testUpdateMovie() {
        Movie movie = new Movie("1", 0, "The Shawshank Redemption", "Drama", "USA", 0, "1994", null, null, null, null, null, null, null);
        when(movieRepository.save(movie)).thenReturn(movie);
        assertEquals(movie, movieServiceImpl.updateMovie(movie));
    }

    @Test
    public void testGetAllMovies() {
        MovieList movieList = new MovieList();
        when(restTemplate.getForObject("https://api.themoviedb.org/3/movie/popular?api_key=API_KEY", MovieList.class))
                .thenReturn(movieList);
        assertEquals(movieList, movieServiceImpl.getAllMovies());
    }
}



